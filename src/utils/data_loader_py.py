# -*- coding: utf-8 -*-
"""src/utils/data_loader.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pU-R1NT9lsO3F1XUKKPq7Si3oOTmiFf3
"""

# -*- coding: utf-8 -*-
"""
data_loader.py

Ce module contient des fonctions utilitaires pour charger les données prétraitées
et les mappings nécessaires au système de recommandation.
"""

import pandas as pd
import numpy as np

def load_processed_data(data_dir='../data/'):
    """
    Charge les DataFrames d'entraînement, de validation et de test.

    Args:
        data_dir (str): Chemin vers le répertoire contenant les fichiers CSV.

    Returns:
        tuple: (train_df, val_df, test_df)
    """
    try:
        train_df = pd.read_csv(f'{data_dir}train_ratings.csv')
        val_df = pd.read_csv(f'{data_dir}val_ratings.csv')
        test_df = pd.read_csv(f'{data_dir}test_ratings.csv')
        print(f"Données chargées depuis {data_dir}")
        return train_df, val_df, test_df
    except FileNotFoundError as e:
        print(f"Erreur de chargement des données : {e}")
        print("Assure-toi que les fichiers train_ratings.csv, val_ratings.csv, test_ratings.csv existent.")
        return None, None, None

def load_mappings(data_dir='../data/'):
    """
    Charge les dictionnaires de mapping pour les utilisateurs et les films.

    Args:
        data_dir (str): Chemin vers le répertoire contenant les fichiers .npy.

    Returns:
        tuple: (user_to_id, id_to_user, movie_to_id, id_to_movie)
    """
    try:
        user_to_id = np.load(f'{data_dir}user_to_id.npy', allow_pickle=True).item()
        id_to_user = np.load(f'{data_dir}id_to_user.npy', allow_pickle=True).item()
        movie_to_id = np.load(f'{data_dir}movie_to_id.npy', allow_pickle=True).item()
        id_to_movie = np.load(f'{data_dir}id_to_movie.npy', allow_pickle=True).item()
        print(f"Mappings chargés depuis {data_dir}")
        return user_to_id, id_to_user, movie_to_id, id_to_movie
    except FileNotFoundError as e:
        print(f"Erreur de chargement des mappings : {e}")
        print("Assure-toi que les fichiers .npy de mapping existent.")
        return None, None, None, None

def load_movies_data(data_dir='../data/'):
    """
    Charge le DataFrame des informations sur les films (titres, genres).

    Args:
        data_dir (str): Chemin vers le répertoire contenant le fichier movies.csv.

    Returns:
        pd.DataFrame: DataFrame des films.
    """
    try:
        df_movies = pd.read_csv(f'{data_dir}movies.csv')
        print(f"Données de films chargées depuis {data_dir}")
        return df_movies
    except FileNotFoundError as e:
        print(f"Erreur de chargement des données de films : {e}")
        print("Assure-toi que le fichier movies.csv existe.")
        return None

if __name__ == '__main__':
    # Exemple d'utilisation pour tester le module
    print("Test du chargement des données et mappings...")
    train_df, val_df, test_df = load_processed_data()
    user_to_id, id_to_user, movie_to_id, id_to_movie = load_mappings()
    df_movies = load_movies_data()

    if train_df is not None:
        print(f"Train DataFrame head:\n{train_df.head()}")
    if user_to_id is not None:
        print(f"Nombre d'utilisateurs mappés: {len(user_to_id)}")
    if df_movies is not None:
        print(f"Movies DataFrame head:\n{df_movies.head()}")