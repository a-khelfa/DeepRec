# -*- coding: utf-8 -*-
"""src/models/deep_recommender.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12NxOETI0bHuteYf-2O9oKf36xiKjXA74
"""

# -*- coding: utf-8 -*-
"""
deep_recommender.py

Ce module définit l'architecture du modèle de recommandation basé sur les réseaux neuronaux profonds
(Deep Learning) en utilisant TensorFlow/Keras.
"""

import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Embedding, Flatten, Dense, Concatenate

def build_deep_recommender_model(n_users, n_movies, embedding_dim=50):
    """
    Construit et compile un modèle de recommandation basé sur le Deep Learning.

    Args:
        n_users (int): Nombre total d'utilisateurs uniques.
        n_movies (int): Nombre total de films uniques.
        embedding_dim (int): Dimension des vecteurs d'embedding pour les utilisateurs et les films.

    Returns:
        tf.keras.Model: Le modèle Keras compilé.
    """

    # Entrée pour les IDs d'utilisateurs
    user_input = Input(shape=(1,), name='user_input')
    # Couche d'embedding pour les utilisateurs
    # input_dim = nombre total d'utilisateurs uniques + 1 (pour gérer les IDs de 0 à N-1)
    user_embedding = Embedding(input_dim=n_users + 1,
                               output_dim=embedding_dim,
                               name='user_embedding')(user_input)
    user_vec = Flatten(name='user_flatten')(user_embedding) # Aplatir l'embedding

    # Entrée pour les IDs de films
    movie_input = Input(shape=(1,), name='movie_input')
    # Couche d'embedding pour les films
    movie_embedding = Embedding(input_dim=n_movies + 1,
                                output_dim=embedding_dim,
                                name='movie_embedding')(movie_input)
    movie_vec = Flatten(name='movie_flatten')(movie_embedding) # Aplatir l'embedding

    # Concaténer les vecteurs d'embeddings utilisateur et film
    concat = Concatenate(name='concatenate_embeddings')([user_vec, movie_vec])

    # Couches denses (MLP) pour apprendre les interactions non linéaires
    dense_1 = Dense(128, activation='relu', name='dense_1')(concat)
    dense_2 = Dense(64, activation='relu', name='dense_2')(dense_1)
    dense_3 = Dense(32, activation='relu', name='dense_3')(dense_2)

    # Couche de sortie pour prédire la note
    output = Dense(1, activation=None, name='output_rating')(dense_3)

    # Créer le modèle
    model = Model(inputs=[user_input, movie_input], outputs=output)

    # Compiler le modèle
    # Utilisation de l'optimiseur Adam et de l'erreur quadratique moyenne (MSE) comme fonction de perte.
    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
                  loss='mean_squared_error',
                  metrics=['mae']) # Mean Absolute Error pour le suivi

    return model

if __name__ == '__main__':
    # Exemple d'utilisation pour tester le module
    print("Test de la construction du modèle...")
    # Supposons 1000 utilisateurs et 500 films pour l'exemple
    test_n_users = 1000
    test_n_movies = 500
    test_embedding_dim = 50

    model = build_deep_recommender_model(test_n_users, test_n_movies, test_embedding_dim)
    model.summary()
    print("Modèle construit et résumé affiché.")